@page "/classes/create"
@using System.ComponentModel.DataAnnotations
@using Firebase.Database
@using Firebase.Database.Query
@using System.Text
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager Navigation

@code {
    // Indicates if the current user is an instructor
    private bool isInstructor;
    private string creatorEmail = string.Empty;

    // Represents user data obtained from JavaScript interop
    public class UserData
    {
        public string Email { get; set; } = string.Empty;
    }

    // Represents the form data for creating a class
    public class ClassModel
    {
        [Required(ErrorMessage = "Class name is required.")]
        public string ClassName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Start time is required.")]
        public string ClassStartTime { get; set; } = string.Empty;

        [Required(ErrorMessage = "End time is required.")]
        public string ClassEndTime { get; set; } = string.Empty;

        [Required(ErrorMessage = "Start date is required.")]
        public DateTime ClassStartDate { get; set; } = DateTime.Now;

        [Required(ErrorMessage = "End date is required.")]
        public DateTime ClassEndDate { get; set; } = DateTime.Now;

        [Required(ErrorMessage = "Late minutes threshold is required.")]
        public int LateMinutes { get; set; } = 0;

        [Required(ErrorMessage = "Absent minutes threshold is required.")]
        public int AbsentMinutes { get; set; } = 0;

        [Required(ErrorMessage = "Checkin location is required.")]
        public string CheckinLocation { get; set; } = string.Empty;

        [Required(ErrorMessage = "Checkin distance is required.")]
        public int CheckinDistance { get; set; } = 0;

        // Days of the week checkboxes
        public bool Monday { get; set; }
        public bool Tuesday { get; set; }
        public bool Wednesday { get; set; }
        public bool Thursday { get; set; }
        public bool Friday { get; set; }
    }

    // Represents the data structure to be saved in Firebase
    public class ClassData
    {
        public string ClassName { get; set; } = string.Empty;
        public List<string> SelectedDays { get; set; } = new List<string>();
        public string ClassStartTime { get; set; } = string.Empty;
        public string ClassEndTime { get; set; } = string.Empty;
        public DateTime ClassStartDate { get; set; } = DateTime.Now;
        public DateTime ClassEndDate { get; set; } = DateTime.Now;
        public int LateMinutes { get; set; } = 0;
        public int AbsentMinutes { get; set; } = 0;
        public string CheckinLocation { get; set; } = string.Empty;
        public int CheckinDistance { get; set; } = 0;
        public string CreatorEmail { get; set; } = string.Empty;
    }

    // Initialize classModel and errorMessage variables
    private ClassModel classModel = new ClassModel();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Fetch user data from JavaScript interop
        var userData = await JSRuntime.InvokeAsync<UserData>("getUserData");
        isInstructor = await JSRuntime.InvokeAsync<bool>("getIsInstructor");
        if (userData != null)
        {
            creatorEmail = userData.Email;
            StateHasChanged();
        }        
    }

    // Initialize geolocation service
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("geoLocation.initialize");
        }
    }

    // Handles form submission
    private async Task HandleValidSubmit()
    {
        try
        {
            // Parse start and end times
            var startTime = TimeSpan.Parse(classModel.ClassStartTime);
            var endTime = TimeSpan.Parse(classModel.ClassEndTime);

            // Generate unique ID for the class
            var uid = Guid.NewGuid().ToString();

            // Collect selected days for the class
            var selectedDays = new List<string>();
            if (classModel.Monday) selectedDays.Add("Monday");
            if (classModel.Tuesday) selectedDays.Add("Tuesday");
            if (classModel.Wednesday) selectedDays.Add("Wednesday");
            if (classModel.Thursday) selectedDays.Add("Thursday");
            if (classModel.Friday) selectedDays.Add("Friday");

            // Prepare class data for Firebase
            var classData = new ClassData
                {
                    ClassName = classModel.ClassName,
                    SelectedDays = selectedDays,
                    ClassStartTime = startTime.ToString(@"hh\:mm"),
                    ClassEndTime = endTime.ToString(@"hh\:mm"),
                    ClassStartDate = classModel.ClassStartDate,
                    ClassEndDate = classModel.ClassEndDate,
                    LateMinutes = classModel.LateMinutes,
                    AbsentMinutes = classModel.AbsentMinutes,
                    CheckinLocation = classModel.CheckinLocation,
                    CheckinDistance = classModel.CheckinDistance,
                    CreatorEmail = creatorEmail
                };

            // Generate CSV data for class dates
            var csvData = GenerateCSV(classData);

            // Serialize CSV data to JSON for Firebase
            var jsonMember = JsonSerializer.Serialize(csvData);

            // Save class data to Firebase Realtime Database
            try
            {
                await JSRuntime.InvokeAsync<object>("saveClassData", uid, classData, csvData);

                Console.WriteLine("Class and CSV data saved successfully.");
                Navigation.NavigateTo("/classes");
            }
            catch (Exception ex)
            {
                errorMessage = $"Error: {ex.Message}";
            }

            Console.WriteLine("Class successfully created and pushed to Firebase.");
            Navigation.NavigateTo("/classes");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    // Generates CSV data for selected class dates
    private string GenerateCSV(ClassData classData)
    {
        DateTime startDate = classData.ClassStartDate;
        DateTime endDate = classData.ClassEndDate;
        List<string> selectedDays = classData.SelectedDays;

        StringBuilder csvBuilder = new StringBuilder();

        // Iterate through each day between start and end dates
        for (DateTime currentDate = startDate; currentDate <= endDate; currentDate = currentDate.AddDays(1))
        {
            // Check if the current day is one of the selected days
            if (selectedDays.Contains(currentDate.DayOfWeek.ToString()))
            {
                csvBuilder.Append($"{currentDate.Year}-{currentDate.Month}-{currentDate.Day},");
            }
        }
        return csvBuilder.ToString().TrimEnd(',');
    }

    // Get current location
    private async Task GetLocation()
    {
        classModel.CheckinLocation = await JSRuntime.InvokeAsync<string>("geoLocation.getTarget");
        StateHasChanged();
        Console.WriteLine($"Location: {classModel.CheckinLocation}");
    }
}

<PageTitle>Create Class</PageTitle>

<h3>Create Class</h3>

<!-- Form to create a new class -->
<EditForm Model="@classModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (isInstructor == true)
    {
        <!-- Class Name input field -->
        <div>
            <label>Class Name:</label>
            <InputText @bind-Value="classModel.ClassName" />
        </div>

        <!-- Days of the week checkboxes -->
        <div>
            <label>What days does the class meet?</label>
            <div>
                <InputCheckbox @bind-Value="classModel.Monday" />
                <label>Monday</label>
            </div>
            <div>
                <InputCheckbox @bind-Value="classModel.Tuesday" />
                <label>Tuesday</label>
            </div>
            <div>
                <InputCheckbox @bind-Value="classModel.Wednesday" />
                <label>Wednesday</label>
            </div>
            <div>
                <InputCheckbox @bind-Value="classModel.Thursday" />
                <label>Thursday</label>
            </div>
            <div>
                <InputCheckbox @bind-Value="classModel.Friday" />
                <label>Friday</label>
            </div>
        </div>

        <!-- Class Start Time input field -->
        <div>
            <label>Class Start Time:</label>
            <InputText @bind-Value="classModel.ClassStartTime" type="time" />
        </div>

        <!-- Class End Time input field -->
        <div>
            <label>Class End Time:</label>
            <InputText @bind-Value="classModel.ClassEndTime" type="time" />
        </div>

        <!-- Class Start Date input field -->
        <div>
            <label>Class Start Date:</label>
            <InputDate @bind-Value="classModel.ClassStartDate" />
        </div>

        <!-- Class End Date input field -->
        <div>
            <label>Class End Date:</label>
            <InputDate @bind-Value="classModel.ClassEndDate" />
        </div>

        <!-- Late Minutes input field -->
        <div>
            <label>How many minutes is considered late?</label>
            <InputNumber @bind-Value="classModel.LateMinutes" />
        </div>

        <!-- Absent Minutes input field -->
        <div>
            <label>How many minutes is considered absent?</label>
            <InputNumber @bind-Value="classModel.AbsentMinutes" />
        </div>
    }

    <!-- Checkin Location input field -->
    <div>
        <button @onclick="GetLocation" type="button" id="locationButton">Get Current Location</button>
        <InputText id="target" @bind-Value="classModel.CheckinLocation" readonly="true" />
    </div>

    @if (isInstructor == true)
    {
        <!-- Checkin Distance input field -->
        <div>
            <label>What is the maximum distance for check-in (in meters)?</label>
            <InputNumber @bind-Value="classModel.CheckinDistance" />
        </div>

        <!-- Submit button -->
        <button class="btn btn-primary" type="submit" @onclick="HandleValidSubmit">Submit</button>
    }
</EditForm>

<!-- Display error message if any -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
