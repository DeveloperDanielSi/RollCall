@page "/classes/create"
@using System.ComponentModel.DataAnnotations
@using Firebase.Database
@using Firebase.Database.Query
@using System.Text.Json
@using System.Text
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<PageTitle>Create Class</PageTitle>

<h3>Create Class</h3>

<!-- Form to create a new class -->
<EditForm Model="@classModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Class Name input field -->
    <div>
        <label>Class Name:</label>
        <InputText @bind-Value="classModel.ClassName" />
    </div>

    <!-- Days of the week checkboxes -->
    <div>
        <label>What days does the class meet?</label>
        <div>
            <InputCheckbox @bind-Value="classModel.Monday" />
            <label>Monday</label>
        </div>
        <div>
            <InputCheckbox @bind-Value="classModel.Tuesday" />
            <label>Tuesday</label>
        </div>
        <div>
            <InputCheckbox @bind-Value="classModel.Wednesday" />
            <label>Wednesday</label>
        </div>
        <div>
            <InputCheckbox @bind-Value="classModel.Thursday" />
            <label>Thursday</label>
        </div>
        <div>
            <InputCheckbox @bind-Value="classModel.Friday" />
            <label>Friday</label>
        </div>
    </div>

    <!-- Class Start Time input field -->
    <div>
        <label>Class Start Time:</label>
        <InputText @bind-Value="classModel.ClassStartTime" type="time" />
    </div>

    <!-- Class End Time input field -->
    <div>
        <label>Class End Time:</label>
        <InputText @bind-Value="classModel.ClassEndTime" type="time" />
    </div>

    <!-- Class Start Date input field -->
    <div>
        <label>Class Start Date:</label>
        <InputDate @bind-Value="classModel.ClassStartDate" />
    </div>

    <!-- Class End Date input field -->
    <div>
        <label>Class End Date:</label>
        <InputDate @bind-Value="classModel.ClassEndDate" />
    </div>

    <!-- Late Minutes input field -->
    <div>
        <label>How many minutes is considered late?</label>
        <InputNumber @bind-Value="classModel.LateMinutes" />
    </div>

    <!-- Absent Minutes input field -->
    <div>
        <label>How many minutes is considered absent?</label>
        <InputNumber @bind-Value="classModel.AbsentMinutes" />
    </div>

    <!-- Submit button -->
    <button type="submit">Submit</button>
</EditForm>

<!-- Display error message if any -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    public class UserData
    {
        public string Email { get; set; } = string.Empty;
    }

    private string creatorEmail = string.Empty;

    public class ClassModel
    {
        [Required]
        public string ClassName { get; set; } = string.Empty;
        [Required]
        public string ClassStartTime { get; set; } = string.Empty;
        [Required]
        public string ClassEndTime { get; set; } = string.Empty;
        [Required]
        public DateTime ClassStartDate { get; set; } = DateTime.Now;
        [Required]
        public DateTime ClassEndDate { get; set; } = DateTime.Now;
        [Required]
        public int LateMinutes { get; set; } = 0;
        [Required]
        public int AbsentMinutes { get; set; } = 0;

        // Days of the week checkboxes
        public bool Monday { get; set; }
        public bool Tuesday { get; set; }
        public bool Wednesday { get; set; }
        public bool Thursday { get; set; }
        public bool Friday { get; set; }
    }

    public class ClassData
    {
        public string ClassName { get; set; } = string.Empty;
        public List<string> SelectedDays { get; set; } = new List<string>();
        public string ClassStartTime { get; set; } = string.Empty;
        public string ClassEndTime { get; set; } = string.Empty;
        public DateTime ClassStartDate { get; set; } = DateTime.Now;
        public DateTime ClassEndDate { get; set; } = DateTime.Now;
        public int LateMinutes { get; set; } = 0;
        public int AbsentMinutes { get; set; } = 0;
        public string CreatorEmail { get; set; } = string.Empty;
    }

    private ClassModel classModel = new ClassModel();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var userData = await JSRuntime.InvokeAsync<UserData>("getUserData");
        if (userData != null)
        {
            creatorEmail = userData.Email;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (Configuration == null)
            {
                throw new Exception("Configuration is null");
            }

            string databaseUrl = "https://rollcall-4f68e-default-rtdb.firebaseio.com";
            if (string.IsNullOrEmpty(databaseUrl))
            {
                throw new Exception("Firebase:DatabaseUrl is null or empty");
            }

            var startTime = TimeSpan.Parse(classModel.ClassStartTime);
            var endTime = TimeSpan.Parse(classModel.ClassEndTime);

            var firebaseClient = new FirebaseClient(databaseUrl);
            var uid = Guid.NewGuid().ToString();

            var selectedDays = new List<string>();
            if (classModel.Monday) selectedDays.Add("Monday");
            if (classModel.Tuesday) selectedDays.Add("Tuesday");
            if (classModel.Wednesday) selectedDays.Add("Wednesday");
            if (classModel.Thursday) selectedDays.Add("Thursday");
            if (classModel.Friday) selectedDays.Add("Friday");

            var classData = new ClassData
                {
                    ClassName = classModel.ClassName,
                    SelectedDays = selectedDays,
                    ClassStartTime = startTime.ToString(@"hh\:mm"),
                    ClassEndTime = endTime.ToString(@"hh\:mm"),
                    ClassStartDate = classModel.ClassStartDate,
                    ClassEndDate = classModel.ClassEndDate,
                    LateMinutes = classModel.LateMinutes,
                    AbsentMinutes = classModel.AbsentMinutes,
                    CreatorEmail = creatorEmail
                };

            // Generate CSV data (list of dates for the class under the "Dates" student)
            var csvData = GenerateCSV(classData);
            // Serialize the string into JSON for firebase
            var member = System.Text.Json.JsonSerializer.Serialize<string>(csvData);

            // Save class data to Firebase
            await firebaseClient
                .Child("classes")
                .Child(uid)
                .PutAsync(classData);
 
            // Store CSV data in Firebase RTDB
            await firebaseClient
                .Child("classes")
                .Child(uid)
                .Child("Students")
                .Child("Dates")
                .PutAsync(member);

            Console.WriteLine("Class successfully created and pushed to Firebase.");
            Navigation.NavigateTo("/classes");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private string GenerateCSV(ClassData classData)
    {
        DateTime startDate = classData.ClassStartDate;
        DateTime endDate = classData.ClassEndDate;
        List<string> selectedDays = classData.SelectedDays;

        StringBuilder csvBuilder = new StringBuilder();

        // Initialize currentDate for iterating through days
        DateTime currentDate = startDate;

        // Iterate through each day between start and end dates
        while (currentDate <= endDate)
        {
            // Check if the current day is one of the selected days
            if (selectedDays.Contains(currentDate.DayOfWeek.ToString()))
            {
                csvBuilder.Append(currentDate.Year);
                csvBuilder.Append("-");
                csvBuilder.Append(currentDate.Month);
                csvBuilder.Append("-");
                csvBuilder.Append(currentDate.Day);
                csvBuilder.Append(",");
            }

            // Move to the next day
            currentDate = currentDate.AddDays(1);
        }
        return csvBuilder.ToString();
    }
}
