@page "/reporting"
@using Firebase.Database
@using Firebase.Database.Query
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager Navigation

@code {
    private bool isInstructor;
    private UserData userData = new UserData();
    private List<ClassData> classes = new List<ClassData>();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    public class UserData
    {
        public string Email { get; set; } = string.Empty;
        public string UID { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
    }

    public class ClassData
    {
        public string ClassId { get; set; } = string.Empty;
        public string ClassName { get; set; } = string.Empty;
        public string CreatorEmail { get; set; } = string.Empty;
        public Dictionary<string, string> Students { get; set; } = new Dictionary<string, string>();
        public bool IsEditing { get; set; } = false;
        public Dictionary<string, string> EditedStudents { get; set; } = new Dictionary<string, string>();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadClasses();
    }

    private async Task LoadUserData()
    {
        try
        {
            userData = await JSRuntime.InvokeAsync<UserData>("getUserData");
            isInstructor = await JSRuntime.InvokeAsync<bool>("getIsInstructor");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
        }
    }

    private async Task LoadClasses()
    {
        try
        {
            var classesJson = await JSRuntime.InvokeAsync<string>("loadClassesReporting", userData, isInstructor);
            // Console.WriteLine("Classes JSON: " + classesJson);

            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

            classes = JsonSerializer.Deserialize<List<ClassData>>(classesJson, options);
            // Console.WriteLine("Loaded Classes: " + JsonSerializer.Serialize(classes, options));
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading classes: {ex.Message}";
        }
    }

    private void EditClass(string classId)
    {
        var classData = classes.FirstOrDefault(c => c.ClassId == classId);

        if (classData != null)
        {
            classData.IsEditing = true;
            classData.EditedStudents = new Dictionary<string, string>(classData.Students);
        }
    }

    private async Task SaveClass(string classId)
    {
        var classData = classes.FirstOrDefault(c => c.ClassId == classId);
        if (classData != null)
        {
            try
            {
                successMessage = await JSRuntime.InvokeAsync<string>("saveClass", classId, classData.EditedStudents);
                classData.Students = new Dictionary<string, string>(classData.EditedStudents);
                classData.IsEditing = false;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error saving class data: {ex.Message}";
            }
        }
    }

    private void CancelEdit(string classId)
    {
        var classData = classes.FirstOrDefault(c => c.ClassId == classId);
        if (classData != null)
        {
            classData.IsEditing = false;
            classData.EditedStudents.Clear();
        }
    }

    private async Task ExportCSV(string classId)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("exportCSV", classId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error exporting CSV: {ex.Message}";
        }
    }

    private async Task ImportCSV(string classId)
    {
        var classData = classes.FirstOrDefault(c => c.ClassId == classId);
        if (classData != null)
        {
            try
            {
                var csvContent = await JSRuntime.InvokeAsync<string>("uploadCSV");
                var lines = csvContent.Split('\n');

                var dates = lines[0].Split(',').Skip(1).ToArray();
                classData.EditedStudents["dates"] = string.Join(",", dates);

                for (int i = 1; i < lines.Length; i++)
                {
                    var values = lines[i].Split(',');
                    if (values.Length > 1)
                    {
                        var studentName = values[0];
                        var attendance = string.Join(",", values.Skip(1));
                        classData.EditedStudents[studentName] = attendance;
                    }
                }

                await SaveClass(classId);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error importing CSV: {ex.Message}";
            }
        }
    }

    private async Task ToggleClassDetails(string className)
    {
        await JSRuntime.InvokeVoidAsync("toggleCollapse", "collapse-" + className);
    }

    string SanitizeClassName(string className)
    {
        return className.Replace(" ", "-").Replace(".", "").Replace("#", "").Replace("[", "").Replace("]", "");
    }

    int CountOccurrences(string input, char target)
    {
        return input.Count(c => c == target);
    }

    private void UpdateAttendance(string classId, string studentName, int index, string value)
    {
        var classData = classes.FirstOrDefault(c => c.ClassId == classId);
        if (classData != null && classData.EditedStudents.ContainsKey(studentName))
        {
            var attendanceList = classData.EditedStudents[studentName].Split(',');
            attendanceList[index] = value;

            int newLength = attendanceList.Sum(entry => entry.Length) * 2 + 1;

            for (int i = 0; i < attendanceList.Length; i++)
            {
                attendanceList[i] = attendanceList[i].Length > 0 ? attendanceList[i][0].ToString().ToUpper() : string.Empty;
            }

            classData.EditedStudents[studentName] = string.Join(",", attendanceList);
        }
    }
}

<PageTitle>Reporting</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" style="white-space: pre-wrap;">
        @((MarkupString)successMessage)
    </div>
}

@if (isInstructor == true)
{
    <ul class="list-group">
        @foreach (var classItem in classes)
        {
            <li class="list-group-item">
                @{
                    var sanitizedClassName = SanitizeClassName(classItem.ClassName);
                }

                <div class="class-item-container">
                    <a class="btn btn-link class-item-link" href="javascript:void(0);" role="button" aria-expanded="false" aria-controls="collapse-@sanitizedClassName" @onclick="() => ToggleClassDetails(sanitizedClassName)">
                        @classItem.ClassName
                    </a>

                    <div class="class-item-buttons">
                        @if (classItem.IsEditing)
                        {
                            <button class="btn btn-success" @onclick="() => SaveClass(classItem.ClassId)">Save</button>
                            <button class="btn btn-secondary" @onclick="() => CancelEdit(classItem.ClassId)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-warning" @onclick="() => EditClass(classItem.ClassId)">Edit</button>
                            <button class="btn btn-secondary" @onclick="() => ExportCSV(classItem.ClassId)">Export CSV</button>
                            <button class="btn btn-secondary" @onclick="() => ImportCSV(classItem.ClassId)">Import CSV</button>
                        }
                    </div>
                </div>

                <div class="collapse class-item-details" id="collapse-@sanitizedClassName">
                    <div class="card card-body table-responsive" style="max-width: calc(100vw - 20px - var(--layout-sidebar-compact-width)); max-height: 300px;">
                        @if (classItem.IsEditing)
                        {
                            <table class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">Student</th>
                                        @foreach (var date in classItem.EditedStudents.ContainsKey("dates") ? classItem.EditedStudents["dates"].Split(',') : new string[0])
                                        {
                                            <th scope="col">@date</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var student in classItem.EditedStudents)
                                    {
                                        if (student.Key != "dates")
                                        {
                                            <tr>
                                                <td>@student.Key</td>
                                                @{
                                                    var dates = classItem.EditedStudents.ContainsKey("dates") ? classItem.EditedStudents["dates"].Split(',') : new string[0];
                                                    var attendanceList = student.Value.Split(',').ToList();

                                                    while (attendanceList.Count < dates.Length)
                                                    {
                                                        attendanceList.Add(string.Empty);
                                                    }
                                                }
                                                @for (int i = 0; i < dates.Length; i++)
                                                {
                                                    var currentIndex = i;
                                                    <td>
                                                        <input type="text" value="@attendanceList[currentIndex]" @oninput="(e) => { attendanceList[currentIndex] = e.Value.ToString(); classItem.EditedStudents[student.Key] = string.Join(',', attendanceList); }" class="form-control" />
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <table class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">Student</th>
                                        <th scope="col">On Time</th>
                                        <th scope="col">Late Arrivals</th>
                                        <th scope="col">Absences</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var student in classItem.Students)
                                    {
                                        if (student.Key != "dates")
                                        {
                                            <tr>
                                                <td>@student.Key</td>
                                                <td>@CountOccurrences(student.Value, 'O')</td>
                                                <td>@CountOccurrences(student.Value, 'L')</td>
                                                <td>@CountOccurrences(student.Value, 'A')</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
}
else
{
    <ul class="list-group">
        @foreach (var classItem in classes)
        {
            var sanitizedClassName = SanitizeClassName(classItem.ClassName);

            <li class="list-group-item">
                <div class="class-item-container">
                    <a class="btn btn-link class-item-link" href="javascript:void(0);" role="button" aria-expanded="false" aria-controls="collapse-@sanitizedClassName" @onclick="() => ToggleClassDetails(sanitizedClassName)">
                        @classItem.ClassName
                    </a>
                </div>

                <div class="collapse class-item-details" id="collapse-@sanitizedClassName">
                    <div class="card card-body table-responsive" style="max-width: calc(100vw - 20px - var(--layout-sidebar-compact-width)); max-height: 300px;">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">Status</th>
                                    <th scope="col">Count</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (classItem.Students.ContainsKey(userData.DisplayName))
                                {
                                    var studentAttendance = classItem.Students[userData.DisplayName];
                                    <tr>
                                        <td>On Time</td>
                                        <td>@CountOccurrences(studentAttendance, 'O')</td>
                                    </tr>
                                    <tr>
                                        <td>Late Arrivals</td>
                                        <td>@CountOccurrences(studentAttendance, 'L')</td>
                                    </tr>
                                    <tr>
                                        <td>Absences</td>
                                        <td>@CountOccurrences(studentAttendance, 'A')</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="2">No attendance data available</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </li>
        }
    </ul>
}

