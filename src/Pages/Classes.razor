@page "/classes"
@using Firebase.Database
@using Firebase.Database.Query
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager Navigation

@code {
    // User data
    private bool isInstructor;
    private UserData userData = new UserData();
    private List<ClassData> classes = new List<ClassData>();
    private List<GeneratedInvite> generatedInvites = new List<GeneratedInvite>();

    // Invite code fields
    private string inviteCode = string.Empty;
    private string joinClassCode = string.Empty;

    // Messages fields
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // User data model
    public class UserData
    {
        public string Email { get; set; } = string.Empty;
        public string UID { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
    }

    // Class data model
    public class ClassData
    {
        public string ClassId { get; set; } = string.Empty;
        public string ClassName { get; set; } = string.Empty;
        public List<string> SelectedDays { get; set; } = new List<string>();
        public string ClassStartTime { get; set; } = string.Empty;
        public string ClassEndTime { get; set; } = string.Empty;
        public string CheckinLocation { get; set; } = string.Empty;
        public int CheckinDistance { get; set; } = 0;
        public DateTime ClassStartDate { get; set; } = DateTime.Now;
        public DateTime ClassEndDate { get; set; } = DateTime.Now;
        public int LateMinutes { get; set; } = 0;
        public int AbsentMinutes { get; set; } = 0;
        public string CreatorEmail { get; set; } = string.Empty;
        public Dictionary<string, string> Students { get; set; } = new Dictionary<string, string>();
    }

    // Generated invite model
    public class GeneratedInvite
    {
        public string InviteCode { get; set; } = string.Empty;
        public string ClassName { get; set; } = string.Empty;
    }

    // Initialize component
    protected override async Task OnInitializedAsync()
    {
        // Load user data and check if user is instructor
        await LoadUserData();
        await LoadClasses();
    }

    // Initialize geolocation service
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("geoLocation.initialize");
        }
    }

    // Load user data using JavaScript interop
    private async Task LoadUserData()
    {
        try
        {
            // Invoke JavaScript function to get user data
            userData = await JSRuntime.InvokeAsync<UserData>("getUserData");
            // Determine if user is an instructor
            isInstructor = await JSRuntime.InvokeAsync<bool>("getIsInstructor");
        }
        catch (Exception ex)
        {
            // Handle errors if user data retrieval fails
            errorMessage = $"Error loading user data: {ex.Message}";
        }
    }

    // Load classes based on user type (instructor or student)
    private async Task LoadClasses()
    {
        try
        {
            if (isInstructor)
            {
                // Call JavaScript function to get classes created by the instructor
                classes = await JSRuntime.InvokeAsync<List<ClassData>>("getClassesByInstructor", userData.Email);
            }
            else
            {
                // Call JavaScript function to get classes for the student
                classes = await JSRuntime.InvokeAsync<List<ClassData>>("getClassesForStudent", userData.UID);
            }
        }
        catch (Exception ex)
        {
            // Handle errors if loading classes fails
            errorMessage = $"Error loading classes: {ex.Message}";
        }
    }

    // Generate invite code for a specific class
    private async Task GenerateInviteCode(string classId, string className)
    {
        try
        {
            // Call JavaScript function to generate invite code
            var result = await JSRuntime.InvokeAsync<InviteCodeResult>("generateInviteCode", classId, className);

            if (result.errorMessage != null)
            {
                errorMessage = result.errorMessage;
            }
            else
            {
                successMessage = result.successMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calling JavaScript function: {ex.Message}";
        }
    }

    public class InviteCodeResult
    {
        public string inviteCode { get; set; }
        public string successMessage { get; set; }
        public string errorMessage { get; set; }
    }

    // Refreshes the class list after joining a class but doesn't populate classes already loaded
    private async Task RefreshClassList()
    {
        try
        {
            // Clear existing classes
            classes.Clear();

            // Reload classes based on user type
            await LoadClasses();
        }
        catch (Exception ex)
        {
            // Handle errors if refreshing class list fails
            errorMessage = $"Error refreshing class list: {ex.Message}";
        }
    }

    // Join a class using an invite code
    private async Task JoinClass()
    {
        try
        {
            // Call JavaScript function to join the class
            var result = await JSRuntime.InvokeAsync<JoinClassResult>("joinClass", joinClassCode, userData.UID, userData.DisplayName);

            if (!string.IsNullOrEmpty(result.errorMessage))
            {
                errorMessage = result.errorMessage;
            }
            else
            {
                successMessage = result.successMessage;
                await RefreshClassList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calling JavaScript function: {ex.Message}";
        }
    }

    // Result model for the JavaScript function
    public class JoinClassResult
    {
        public string successMessage { get; set; } = string.Empty;
        public string errorMessage { get; set; } = string.Empty;
    }

    // Delete a class and remove it from all enrolled students' lists
    private async Task DeleteClass(string classId, string className)
    {
        try
        {
            // Prompt user to confirm class deletion
            var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {className}?");

            if (confirmDelete)
            {
                // Call JavaScript function to handle class deletion
                await JSRuntime.InvokeVoidAsync("deleteClass", classId);

                // Provide success message and reload classes
                successMessage = "Class deleted successfully!";
                await LoadClasses();
            }
        }
        catch (Exception ex)
        {
            // Handle errors if class deletion fails
            errorMessage = $"Error deleting class: {ex.Message}";
        }
    }

    // Result model for the JavaScript function
    public class DeleteClassResult
    {
        public string successMessage { get; set; } = string.Empty;
        public string errorMessage { get; set; } = string.Empty;
    }

    // Record attendance for a specific cl
    private async Task RecordAttendance(ClassData classData)
    {
        try
        {
            // Log the CheckinDistance value for debugging
            Console.WriteLine($"ClassData.CheckinDistance: {classData.CheckinDistance}");

            string tempLocation = await JSRuntime.InvokeAsync<string>("geoLocation.getTarget");
            StateHasChanged();
            Console.WriteLine($"Location: {tempLocation}");

            var result = await JSRuntime.InvokeAsync<RecordAttendanceResult>("recordAttendance", classData.ClassId, userData.UID, userData.DisplayName, tempLocation);

            if (!string.IsNullOrEmpty(result.errorMessage))
            {
                errorMessage = result.errorMessage;
            }
            else
            {
                successMessage = result.successMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calling JavaScript function: {ex.Message}";
        }
    }

    // Result model for the JavaScript function
    public class RecordAttendanceResult
    {
        public string successMessage { get; set; } = string.Empty;
        public string errorMessage { get; set; } = string.Empty;
    }

    // Redirect to create class page
    private void RedirectToCreateClass()
    {
        Navigation.NavigateTo("/classes/create");
    }

    // Method to sanitize class name for use as collapse id
    string SanitizeClassName(string className)
    {
        return className.Replace(" ", "-").Replace(".", "").Replace("#", "").Replace("[", "").Replace("]", "");
    }

    // Toggle visibility of class details
    private async Task ToggleClassDetails(string className)
    {
        await JSRuntime.InvokeVoidAsync("toggleCollapse", "collapse-" + className);
    }
}

<PageTitle>Classes</PageTitle>

<!-- Display error message if any -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<!-- Display success message if any -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" style="white-space: pre-wrap;">
        @((MarkupString)successMessage)
    </div>
}

<!-- If user is an instructor, show their classes -->
@if (isInstructor == true)
{
    <h4>Create a Class</h4>

    <div>
        <button class="btn btn-primary" @onclick="RedirectToCreateClass">Create a Class</button>
    </div>

    <ul class="list-group">
        @foreach (var classItem in classes)
        {
            <!-- Sanitize class name to use as collapse id -->
            <li class="list-group-item">
                @{
                    var sanitizedClassName = SanitizeClassName(classItem.ClassName);
                }

                <div class="class-item-container">
                    <!-- Link to toggle class details -->
                    <a class="btn btn-link class-item-link" href="javascript:void(0);" role="button" aria-expanded="false" aria-controls="collapse-@sanitizedClassName" @onclick="() => ToggleClassDetails(sanitizedClassName)">
                        @classItem.ClassName
                    </a>

                    <div class="class-item-buttons">
                        <!-- Button to generate invite code for the class -->
                        <button class="btn btn-primary" id="locationButton" @onclick="() => GenerateInviteCode(classItem.ClassId, classItem.ClassName)">Generate Invite Code</button>

                        <!-- Button to delete the class -->
                        <button class="btn btn-danger" @onclick="() => DeleteClass(classItem.ClassId, classItem.ClassName)">Delete</button>
                    </div>
                </div>

                <!-- Collapsible div for class details -->
                <div class="collapse class-item-details" id="collapse-@sanitizedClassName">
                    <div class="card card-body">
                        <p><strong>Days:</strong> @string.Join(", ", classItem.SelectedDays)</p>
                        <p><strong>Start Time:</strong> @classItem.ClassStartTime</p>
                        <p><strong>End Time:</strong> @classItem.ClassEndTime</p>
                        <p><strong>Start Date:</strong> @classItem.ClassStartDate.ToString("yyyy-MM-dd")</p>
                        <p><strong>End Date:</strong> @classItem.ClassEndDate.ToString("yyyy-MM-dd")</p>
                        <p><strong>Late Minutes:</strong> @classItem.LateMinutes</p>
                        <p><strong>Absent Minutes:</strong> @classItem.AbsentMinutes</p>
                    </div>
                </div>
            </li>
        }
    </ul>
}
else
{
    <!-- If user is not an instructor, show classes they can join -->
    <h4>Join a Class</h4>

    <div>
        <label>Invite Code:</label>
        <InputText @bind-Value="joinClassCode" />
        <button class="btn btn-primary" @onclick="JoinClass">Join Class</button>
    </div>

    <ul class="list-group">
        @foreach (var classItem in classes)
        {
            <!-- Sanitize class name to use as collapse id -->
            <li class="list-group-item">
                @{
                    var sanitizedClassName = SanitizeClassName(classItem.ClassName);
                }

                <div class="class-item-container">
                    <!-- Link to toggle class details -->
                    <a class="btn btn-link class-item-link" href="javascript:void(0);" role="button" aria-expanded="false" aria-controls="collapse-@sanitizedClassName" @onclick="() => ToggleClassDetails(sanitizedClassName)">
                        @classItem.ClassName
                    </a>

                    <button class="btn btn-primary class-item-button" @onclick="()=>RecordAttendance(classItem)" data-target="classItem">Check in</button>
                    <div id="target"></div>
                </div>

                <!-- Collapsible div for class details -->
                <div class="collapse class-item-details" id="collapse-@sanitizedClassName">
                    <div class="card card-body">
                        <p><strong>Days:</strong> @string.Join(", ", classItem.SelectedDays)</p>
                        <p><strong>Start Time:</strong> @classItem.ClassStartTime</p>
                        <p><strong>End Time:</strong> @classItem.ClassEndTime</p>
                        <p><strong>Start Date:</strong> @classItem.ClassStartDate.ToString("yyyy-MM-dd")</p>
                        <p><strong>End Date:</strong> @classItem.ClassEndDate.ToString("yyyy-MM-dd")</p>
                    </div>
                </div>
            </li>
        }
    </ul>
}