@page "/settings"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Settings</PageTitle>

<h3>User Profile</h3>
<div>
    <p>Name: @userName</p>
    <p>Email: @userEmail</p>
</div>

<h3>Theme Settings</h3>
<div>
    <label>
        <input type="radio" name="theme" value="light" @onclick="SetLightTheme" /> Light Mode
    </label>
    <label>
        <input type="radio" name="theme" value="dark" @onclick="SetDarkTheme" /> Dark Mode
    </label>
</div>

<button class="btn btn-primary" @onclick="Logout">Logout</button>

@code {
    private string userName;
    private string userEmail;

    protected override async Task OnInitializedAsync()
    {
        var userData = await JSRuntime.InvokeAsync<UserData>("getUserData");
        if (userData != null)
        {
            userName = userData.DisplayName;
            userEmail = userData.Email;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task UpdateUserData(UserData userData)
    {
        userName = userData.DisplayName;
        userEmail = userData.Email;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("logout");
        Navigation.NavigateTo("/");
    }

    private void SetLightTheme()
    {
        SetTheme("light");
    }

    private void SetDarkTheme()
    {
        SetTheme("dark");
    }

    private void SetTheme(string theme)
    {
        // Logic to set the theme
        // You might want to store the theme setting in local storage or a database
        Console.WriteLine($"Theme set to: {theme}");
    }

    public class UserData
    {
        public string DisplayName { get; set; }
        public string Email { get; set; }
    }
}
