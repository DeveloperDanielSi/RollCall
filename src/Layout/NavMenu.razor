@inject IJSRuntime JSRuntime

<!-- Top navigation bar -->
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <!-- Brand name with a link to the home page -->
        <a class="navbar-brand" href="">RollCall</a>
        <!-- Button to toggle the navigation menu -->
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

@if (isAuthenticated)
{
    <!-- Navigation menu -->
    <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="classes">
                    <span class="bi bi-calendar-nav-menu" aria-hidden="true"></span> Classes
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="reporting">
                    <span class="bi bi-checkboard-nav-menu" aria-hidden="true"></span> Reporting
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="settings">
                    <span class="bi bi-gear-nav-menu" aria-hidden="true"></span> Settings
                </NavLink>
            </div>
        </nav>
    </div>
}

@code {
    private bool collapseNavMenu = true;
    private bool isAuthenticated = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        // Add event listener for custom event
        await JSRuntime.InvokeVoidAsync("eval", @"
            window.addEventListener('user-logged-out', function() {
                DotNet.invokeMethodAsync('RollCall', 'OnUserLoggedOut');
            });
        ");

        // Check the authentication status
        isAuthenticated = await JSRuntime.InvokeAsync<bool>("isUserAuthenticated");
    }

    [JSInvokable]
    public static Task OnUserLoggedOut()
    {
        // Logic to handle user logout event
        return Task.CompletedTask;
    }
}